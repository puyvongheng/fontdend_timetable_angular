import { OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NzSizeLDSType, NzStatus, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';
import { NzInputAddonAfterDirective, NzInputAddonBeforeDirective, NzInputPrefixDirective, NzInputSuffixDirective } from 'ng-zorro-antd/input';
import * as i0 from "@angular/core";
import * as i1 from "ng-zorro-antd/space";
export declare class NzInputNumberComponent implements OnInit, ControlValueAccessor {
    readonly nzId: import("@angular/core").InputSignal<string | null>;
    readonly nzSize: import("@angular/core").InputSignal<NzSizeLDSType>;
    readonly nzPlaceHolder: import("@angular/core").InputSignal<string | null>;
    readonly nzStatus: import("@angular/core").InputSignal<NzStatus>;
    readonly nzStep: import("@angular/core").InputSignalWithTransform<number, unknown>;
    readonly nzMin: import("@angular/core").InputSignalWithTransform<number, unknown>;
    readonly nzMax: import("@angular/core").InputSignalWithTransform<number, unknown>;
    readonly nzPrecision: import("@angular/core").InputSignal<number | null>;
    readonly nzParser: import("@angular/core").InputSignal<(value: string) => number>;
    readonly nzFormatter: import("@angular/core").InputSignal<(value: number) => string>;
    readonly nzDisabled: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly nzReadOnly: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly nzAutoFocus: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly nzBordered: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly nzKeyboard: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly nzControls: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly nzOnStep: import("@angular/core").OutputEmitterRef<{
        value: number;
        offset: number;
        type: "up" | "down";
    }>;
    private onChange;
    private onTouched;
    private isDisabledFirstChange;
    private compactSize;
    private inputRef;
    private hostRef;
    private elementRef;
    private injector;
    private focusMonitor;
    private directionality;
    private nzFormStatusService;
    private autoStepTimer;
    protected value: import("@angular/core").WritableSignal<number | null>;
    protected displayValue: import("@angular/core").WritableSignal<string>;
    protected dir: import("@angular/core").Signal<import("@angular/cdk/bidi").Direction>;
    protected focused: import("@angular/core").WritableSignal<boolean>;
    protected hasFeedback: import("@angular/core").WritableSignal<boolean>;
    protected finalStatus: import("@angular/core").WritableSignal<"" | "error" | "warning" | "success" | "validating">;
    protected finalDisabled: import("@angular/core").WritableSignal<boolean>;
    protected prefix: import("@angular/core").Signal<NzInputPrefixDirective | undefined>;
    protected suffix: import("@angular/core").Signal<NzInputSuffixDirective | undefined>;
    protected addonBefore: import("@angular/core").Signal<NzInputAddonBeforeDirective | undefined>;
    protected addonAfter: import("@angular/core").Signal<NzInputAddonAfterDirective | undefined>;
    protected hasAffix: import("@angular/core").Signal<boolean>;
    protected hasAddon: import("@angular/core").Signal<boolean>;
    protected class: import("@angular/core").Signal<{
        'ant-input-number-group-wrapper': boolean;
        'ant-input-number-group-wrapper-rtl': boolean;
    } | {
        'ant-input-number-affix-wrapper': boolean;
        'ant-input-number-affix-wrapper-disabled': boolean;
        'ant-input-number-affix-wrapper-readonly': boolean;
        'ant-input-number-affix-wrapper-borderless': boolean;
        'ant-input-number-affix-wrapper-focused': boolean;
        'ant-input-number-affix-wrapper-rtl': boolean;
    } | {
        'ant-input-number': boolean;
        'ant-input-number-lg': boolean;
        'ant-input-number-sm': boolean;
        'ant-input-number-disabled': boolean;
        'ant-input-number-readonly': boolean;
        'ant-input-number-borderless': boolean;
        'ant-input-number-focused': boolean;
        'ant-input-number-rtl': boolean;
        'ant-input-number-in-form-item': boolean;
        'ant-input-number-out-of-range': boolean;
    }>;
    protected inputNumberClass: import("@angular/core").Signal<{
        'ant-input-number': boolean;
        'ant-input-number-lg': boolean;
        'ant-input-number-sm': boolean;
        'ant-input-number-disabled': boolean;
        'ant-input-number-readonly': boolean;
        'ant-input-number-borderless': boolean;
        'ant-input-number-focused': boolean;
        'ant-input-number-rtl': boolean;
        'ant-input-number-in-form-item': boolean;
        'ant-input-number-out-of-range': boolean;
    }>;
    protected affixWrapperClass: import("@angular/core").Signal<{
        'ant-input-number-affix-wrapper': boolean;
        'ant-input-number-affix-wrapper-disabled': boolean;
        'ant-input-number-affix-wrapper-readonly': boolean;
        'ant-input-number-affix-wrapper-borderless': boolean;
        'ant-input-number-affix-wrapper-focused': boolean;
        'ant-input-number-affix-wrapper-rtl': boolean;
    }>;
    protected groupWrapperClass: import("@angular/core").Signal<{
        'ant-input-number-group-wrapper': boolean;
        'ant-input-number-group-wrapper-rtl': boolean;
    }>;
    protected finalSize: import("@angular/core").Signal<NzSizeLDSType>;
    protected upDisabled: import("@angular/core").Signal<boolean>;
    protected downDisabled: import("@angular/core").Signal<boolean>;
    constructor();
    ngOnInit(): void;
    writeValue(value: number | null): void;
    registerOnChange(fn: OnChangeType): void;
    registerOnTouched(fn: OnTouchedType): void;
    setDisabledState(disabled: boolean): void;
    focus(): void;
    blur(): void;
    private step;
    private setValue;
    protected stopAutoStep(): void;
    protected onStepMouseDown(event: MouseEvent | KeyboardEvent, up: boolean): void;
    protected onKeyDown(event: KeyboardEvent): void;
    protected onInputChange(value: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NzInputNumberComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NzInputNumberComponent, "nz-input-number", ["nzInputNumber"], { "nzId": { "alias": "nzId"; "required": false; "isSignal": true; }; "nzSize": { "alias": "nzSize"; "required": false; "isSignal": true; }; "nzPlaceHolder": { "alias": "nzPlaceHolder"; "required": false; "isSignal": true; }; "nzStatus": { "alias": "nzStatus"; "required": false; "isSignal": true; }; "nzStep": { "alias": "nzStep"; "required": false; "isSignal": true; }; "nzMin": { "alias": "nzMin"; "required": false; "isSignal": true; }; "nzMax": { "alias": "nzMax"; "required": false; "isSignal": true; }; "nzPrecision": { "alias": "nzPrecision"; "required": false; "isSignal": true; }; "nzParser": { "alias": "nzParser"; "required": false; "isSignal": true; }; "nzFormatter": { "alias": "nzFormatter"; "required": false; "isSignal": true; }; "nzDisabled": { "alias": "nzDisabled"; "required": false; "isSignal": true; }; "nzReadOnly": { "alias": "nzReadOnly"; "required": false; "isSignal": true; }; "nzAutoFocus": { "alias": "nzAutoFocus"; "required": false; "isSignal": true; }; "nzBordered": { "alias": "nzBordered"; "required": false; "isSignal": true; }; "nzKeyboard": { "alias": "nzKeyboard"; "required": false; "isSignal": true; }; "nzControls": { "alias": "nzControls"; "required": false; "isSignal": true; }; }, { "nzOnStep": "nzOnStep"; }, ["prefix", "suffix", "addonBefore", "addonAfter"], ["[nzInputAddonBefore]", "[nzInputAddonAfter]", "[nzInputPrefix]", "[nzInputSuffix]", "[nzInputNumberUpIcon]", "[nzInputNumberDownIcon]"], true, [{ directive: typeof i1.NzSpaceCompactItemDirective; inputs: {}; outputs: {}; }]>;
}
